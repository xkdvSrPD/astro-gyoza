name: Deploy Astro to DogeCloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build Astro project
      run: pnpm run build
      
    - name: Get DogeCloud temporary credentials
      run: |
        api_path="/auth/tmp_token.json"
        data='{"channel":"OSS_FULL","scopes":["*"]}'
        sign_str="$api_path\n$data"
        signature=$(echo -n "$sign_str" | openssl dgst -sha1 -hmac "${{ secrets.SECRET_KEY }}" -binary | xxd -p)
        
        response=$(curl -s "https://api.dogecloud.com$api_path" \
          -H "Authorization: TOKEN ${{ secrets.ACCESS_KEY }}:$signature" \
          -H "Content-Type: application/json" \
          -d "$data")
        
        echo "AWS_ACCESS_KEY_ID=$(echo "$response" | jq -r '.data.Credentials.accessKeyId')" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(echo "$response" | jq -r '.data.Credentials.secretAccessKey')" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$(echo "$response" | jq -r '.data.Credentials.sessionToken')" >> $GITHUB_ENV
        echo "AWS_S3_BUCKET=$(echo "$response" | jq -r '.data.Bucket.Bucket')" >> $GITHUB_ENV
        echo "AWS_REGION=$(echo "$response" | jq -r '.data.Bucket.Region')" >> $GITHUB_ENV
        echo "AWS_S3_ENDPOINT=$(echo "$response" | jq -r '.data.Bucket.Endpoint')" >> $GITHUB_ENV
        
    - name: Sync to DogeCloud Storage
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_S3_ENDPOINT: ${{ env.AWS_S3_ENDPOINT }}
        SOURCE_DIR: 'dist'
        DEST_DIR: ''
        
    - name: Refresh DogeCloud CDN Cache
      run: |
        if [ -n "${{ secrets.DOMAIN }}" ]; then
          api_path="/cdn/refresh/add.json"
          data="rtype=path&urls=${{ secrets.DOMAIN }}/*"
          sign_str="$api_path\n$data"
          signature=$(echo -n "$sign_str" | openssl dgst -sha1 -hmac "${{ secrets.SECRET_KEY }}" -binary | xxd -p)
          
          response=$(curl -s "https://api.dogecloud.com$api_path" \
            -H "Authorization: TOKEN ${{ secrets.ACCESS_KEY }}:$signature" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "$data")
          
          code=$(echo "$response" | jq -r '.code')
          if [ "$code" = "200" ]; then
            task_id=$(echo "$response" | jq -r '.data.task_id // "N/A"')
            echo "✅ CDN缓存刷新成功，任务ID: $task_id"
          else
            msg=$(echo "$response" | jq -r '.msg // "未知错误"')
            echo "❌ CDN缓存刷新失败: $msg"
            exit 1
          fi
        else
          echo "ℹ️  未配置DOMAIN，跳过CDN缓存刷新"
        fi